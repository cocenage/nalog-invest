<?php

namespace App\Livewire;

use App\Models\Contact;
use Livewire\Component;

use Illuminate\Http\Request;
use GuzzleHttp\Client;

class PageContacts extends Component
{

    public $contact;
    public function mount()
    {


        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞—Å
        $this->contact = Contact::first(); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –≤–∞—Å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å

        
    }
    public function render()
    {
        return view('livewire.page-contacts');
    }

    protected $telegramToken;
    protected $chatId;

    public function __construct()
    {
        $this->telegramToken = env('TELEGRAM_BOT_TOKEN'); // –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ .env
        $this->chatId = env('TELEGRAM_CHAT_ID'); // –î–æ–±–∞–≤—å—Ç–µ chat_id –≤ .env
    }

    public function sendMessageToTelegram($message)
    {
        $client = new Client();
        $url = "https://api.telegram.org/bot{$this->telegramToken}/sendMessage";

        $response = $client->post($url, [
            'json' => [
                'chat_id' => $this->chatId,
                'text' => $message,
            ],
        ]);

        return $response;
    }

    public function handleForm(Request $request)
    {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
        $validatedData = $request->validate([
            'name' => 'required|string|max:255',
            'phone' => 'required|string|max:20',
            'message' => 'required|string',
        ]);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        $message = "üÜï –ù–æ–≤–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞\n\n";

        $message .= "üë§ –ò–º—è: {$validatedData['name']}\n\n";

        $message .= "üìû –¢–µ–ª–µ—Ñ–æ–Ω: {$validatedData['phone']}\n\n";

        $message .= "‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ:\n";
        $message .= "{$validatedData['message']}\n\n";

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        $this->sendMessageToTelegram($message);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ–¥–∏—Ä–µ–∫—Ç –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ)
        return redirect()->back()->with('success', '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
    }
}
